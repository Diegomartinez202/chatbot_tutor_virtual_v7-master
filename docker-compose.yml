# version: "3.9"
name: tutorbot-local

# ============================================================
# Redes y volúmenes
# ============================================================
networks:
  app-net:
    driver: bridge
    external: true
    name: tutorbot-local_app-net

volumes:
  mongo-data: {}
  _docker_data_mongo: {}
  redis-data: {}

# ============================================================
# Servicios
# ============================================================
services:

  # ------------------------------------------------------------
  # MongoDB (común a build/prod)
  # ------------------------------------------------------------
  mongo:
   profiles: ["build","prod"]
   image: mongo:6
   container_name: mongo
   restart: unless-stopped
   ports:
     - "27017:27017"  # útil si quieres conectar desde Compass/host
   volumes:
     - mongo-data:/data/db
    # Si quieres inicializar índices/seed la primera vez:
    # - ./mongo/initdb.d:/docker-entrypoint-initdb.d:ro
   networks:
     - app-net
   # ✅ Healthcheck para coordinar arranque del backend
   healthcheck:
     test: ["CMD", "sh", "-lc", "mongosh --quiet --eval 'db.runCommand({ping:1}).ok' | grep -q 1"]
     interval: 10s
     timeout: 5s
     retries: 10
     start_period: 10s
  # 🔐 (OPCIONAL) Habilitar autenticación de Mongo cuando lo necesites:
  # environment:
  #   MONGO_INITDB_ROOT_USERNAME: root
  #   MONGO_INITDB_ROOT_PASSWORD: supersegura
  #   MONGO_INITDB_DATABASE: tutor_virtual

  # ------------------------------------------------------------
  # MongoDB (perfil: vanilla) — con autenticación
  # ------------------------------------------------------------
  ctv_mongo:
    profiles: ["vanilla"]
    image: mongo:6.0
    container_name: ctv_mongo
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD:-admin123}
    ports:
      - "27018:27017"
    volumes:
      - _docker_data_mongo:/data/db
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "sh", "-lc", "mongosh --quiet --eval 'db.runCommand({ping:1}).ok' | grep -q 1"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
  # ------------------------------------------------------------
  # Rasa Action Server (build/prod)
  # ------------------------------------------------------------
  action-server:
    profiles: ["build","prod"]
    build:
      context: ./rasa
      dockerfile: actions/Dockerfile
    container_name: action-server
    restart: unless-stopped
    env_file:
      - ./.env.local
    environment:
      ACTIONS_LOG_LEVEL: "INFO"
      HELPDESK_WEBHOOK: "http://backend:8000/api/helpdesk/tickets"
      HELPDESK_TOKEN: ""
      ACTIONS_HTTP_TIMEOUT: "10"
      ACTIONS_HTTP_RETRIES: "2"
      SMTP_SERVER: "smtp.office365.com"
      SMTP_PORT: "587"
      SMTP_USER: "bot@ejemplo.com"
      SMTP_PASS: "contraseña_real"
      EMAIL_FROM: "bot@ejemplo.com"
      RESET_URL_BASE: "https://zajuna.edu"
    ports:
      - "5055:5055"
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "sh", "-lc", "curl -fsS http://127.0.0.1:5055/health | grep -q 'ok'"]
      interval: 15s
      timeout: 5s
      retries: 10
      start_period: 5s
# ------------------------------------------------------------
# Rasa (build/prod) — Tracker en Mongo y arranque robusto
# ------------------------------------------------------------
  rasa:
    profiles: ["build","prod"]
    build:
      context: ./rasa
      dockerfile: Dockerfile
    container_name: rasa
    restart: unless-stopped
    env_file:
      - ./.env.local
    environment:
      ACTION_SERVER_URL: http://action-server:5055/webhook
      RASA_PORT: "5005"
      RASA_AUTOTRAIN: "true"
      ENDPOINTS_TEMPLATE: "mongo"
      RASA_MODEL: /app/models
      TRACKER_MONGO_URL: "mongodb://mongo:27017"
      TRACKER_MONGO_DB: "rasa"
      RASA_MODELS_COLLECTION: "trained_models"
      TRACKER_MONGO_COLLECTION: "conversations"
      SQLALCHEMY_SILENCE_UBER_WARNING: "1"
      SQLALCHEMY_WARN_20: "0"
    depends_on:
       action-server:
           condition: service_healthy
       mongo:
           condition: service_healthy
    ports:
      - "5005:5005"
    networks:
      - app-net
    volumes:
      - ./rasa:/app/rasa
      - ./rasa/models:/app/models
      - ./rasa/data:/app/data
      - ./rasa/domain.yml:/app/domain.yml:ro
      - ./rasa/config.yml:/app/config.yml:ro

  # ✅ Creamos endpoints.yml en caliente con los envs y arrancamos con --endpoints
    command: >
      bash -lc "
       cat > /app/endpoints.yml << 'YML'
       action_endpoint:
         url: ${ACTION_SERVER_URL}

      tracker_store:
        type: mongod
        url: ${TRACKER_MONGO_URL}
        db: ${TRACKER_MONGO_DB}
        collection: ${TRACKER_MONGO_COLLECTION}
      YML
      
      echo '[rasa] endpoints.yml generado:'; cat /app/endpoints.yml; echo;

      rasa run
        --enable-api
        --endpoints /app/endpoints.yml
        --port ${RASA_PORT:-5005}
        --cors '*'
      "
    healthcheck:
      test: ["CMD", "sh", "-lc", "curl -fsS http://127.0.0.1:5005/status | grep -q 'model_file'"]
      interval: 30s
      timeout: 5s
      start_period: 600s
      retries: 5

  # ------------------------------------------------------------
  # Rasa (perfil: vanilla)
  # ------------------------------------------------------------
  ctv_rasa:
    profiles: ["vanilla"]
    image: rasa/rasa:3.6.19
    container_name: ctv_rasa
    restart: unless-stopped
    command: >
      rasa run
      --enable-api
      --cors "*"
      --port ${RASA_PORT:-5005}
    working_dir: /app/rasa
    environment:
      SQLALCHEMY_SILENCE_UBER_WARNING: "1"
      SQLALCHEMY_WARN_20: "0"
      RASA_MODEL: /app/models
    volumes:
      - ./rasa:/app/rasa
      - ./rasa/models:/app/models
    ports:
      - "${RASA_PORT:-5005}:5005"
    depends_on:
      - ctv_mongo
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "sh", "-lc", "wget -qO- http://127.0.0.1:5005/status | grep -q 'model_file'"]
      interval: 30s
      timeout: 5s
      start_period: 600s
      retries: 5

  # ------------------------------------------------------------
  # Rasa Action Server (perfil: vanilla)
  # ------------------------------------------------------------
  ctv_rasa_actions:
    profiles: ["vanilla"]
    image: rasa/rasa-sdk:3.6.2
    container_name: ctv_rasa_actions
    restart: unless-stopped
    working_dir: /app
    command: ["python", "-m", "rasa_sdk", "--actions", "actions"]
    volumes:
      - ./rasa/actions:/app/actions
    ports:
      - "5055:5055"
    depends_on:
      - ctv_rasa
      - service_healthy
    networks:
      - app-net
    env_file:
      - ./.env.local
    environment:
      ACTIONS_LOG_LEVEL: "INFO"
      HELPDESK_WEBHOOK: "http://ctv_fastapi:${FASTAPI_PORT:-8000}/api/helpdesk/tickets"
      HELPDESK_TOKEN: ""
      ACTIONS_HTTP_TIMEOUT: "10"
      ACTIONS_HTTP_RETRIES: "2"
      SMTP_SERVER: "smtp.office365.com"
      SMTP_PORT: "587"
      SMTP_USER: "bot@ejemplo.com"
      SMTP_PASS: "contraseña_real"
      EMAIL_FROM: "bot@ejemplo.com"
      RESET_URL_BASE: "https://zajuna.edu"

  # ============================================================
  # Backend DEV (hot reload)
  # ============================================================
  backend-dev:
    profiles: ["build"]
    build:
      context: .
      dockerfile: Dockerfile
      target: dev
      args:
        REQUIREMENTS_PATH: requirements.txt
        APP_UID: ${UID-10001}
        APP_GID: ${GID-10001}
        APP_USER: appuser
    container_name: backend-dev
    restart: unless-stopped
    user: "${UID-10001}:${GID-10001}"
    env_file:
      - ./.env.local
      - ./backend/.env
      - ${BACKEND_ENV_FILE:-backend/.env.dev}
    environment:

      # ✅ CORS / EMBED / CSP (formato compatible con docker-compose)
      
      EMBED_ALLOWED_ORIGINS: "'self', https://tu-frontend.com, http://localhost:8080, http://localhost:5173"
      FRAME_ANCESTORS: '["http://localhost","http://localhost:8080","http://localhost:5173"]'
      ALLOWED_ORIGINS: '["http://localhost:5173","http://localhost:8080","http://localhost"]'
    
      # ✅ Mongo
      MONGO_URI: mongodb://mongo:27017/chatbot_tutor_virtual_v2
      MONGO_DB_NAME: chatbot_tutor_virtual_v7_3
      MONGODB_URL: mongodb://mongo:27017
      MONGODB_DB: chatbot_tutor_virtual_v7_3
      MONGO_URL: mongodb://mongo:27017
      MONGO_DB: chatbot_admin
      # ✅ Rasa (URL base, NO al webhook)
      RASA_URL: http://rasa:5005
      RASA_REST_URL: http://rasa:5005/webhooks/rest/webhook
      RASA_WS_URL: ws://rasa:5005/ws

      # ✅ Rate limit
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_PROVIDER: builtin
      RATE_LIMIT_BACKEND: redis
      REDIS_URL: redis://redis:6379/0

      # ✅ Entorno
      APP_ENV: dev
      DEBUG: "true"
      FRONTEND_SITE_URL: http://localhost:5173

      # ✅ Uvicorn DEV
      UVICORN_HOST: ${UVICORN_HOST:-0.0.0.0}
      UVICORN_PORT: ${UVICORN_PORT:-8000}
      UVICORN_WORKERS: ${UVICORN_WORKERS:-2}


      # ✅ Polling para entornos con FS montado
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
    volumes:
      - ./backend:/app/backend
    depends_on:
     rasa:
      condition: service_healthy
     mongo:
      condition: service_started
     redis:
      condition: service_started
    ports:
      - "8000:8000"
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "sh", "-lc", "curl -fsS http://127.0.0.1:8000/health || curl -fsS http://127.0.0.1:8000/chat/health || curl -fsS http://127.0.0.1:8000/api/chat/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
    command: >
      bash -lc "
        if command -v node >/dev/null 2>&1 && [ -f /app/build-tailwind.js ]; then
          echo '[backend-dev] Node presente: ejecutando build Tailwind...';
          node /app/build-tailwind.js || true;
        else
          echo '[backend-dev] Node NO presente: omitiendo build Tailwind';
        fi;
        exec uvicorn backend.main:app --reload --host ${UVICORN_HOST:-0.0.0.0} --port ${UVICORN_PORT:-8000}
      "

  # ============================================================ 
  # Backend PROD (Uvicorn)
  # ============================================================
  backend:
    profiles: ["prod"]
    build:
      context: .
      dockerfile: Dockerfile
      target: prod
      args:
        REQUIREMENTS_PATH: requirements.txt
        APP_UID: ${UID-10001}
        APP_GID: ${GID-10001}
        APP_USER: appuser
    container_name: backend
    restart: unless-stopped
    env_file:
      - ./.env.local
      - ./backend/.env.production
      - ${BACKEND_ENV_FILE:-backend/.env.production}
    environment:
      UVICORN_HOST: ${UVICORN_HOST:-0.0.0.0}
      UVICORN_PORT: ${UVICORN_PORT:-8000}
      UVICORN_WORKERS: ${UVICORN_WORKERS:-2}
      APP_ENV: prod
      DEBUG: "false"


     # ✅ Mongo
      MONGO_URI: mongodb://mongo:27017/chatbot_tutor_virtual_v2
      MONGO_DB_NAME: chatbot_tutor_virtual_v7_3
      MONGODB_URL: mongodb://mongo:27017
      MONGODB_DB: chatbot_tutor_virtual_v7_3
      MONGO_URL: mongodb://mongo:27017
      MONGO_DB: chatbot_admin
      # ✅ Rasa (URL base, NO al webhook)
      RASA_URL: http://rasa:5005
      RASA_REST_URL: http://rasa:5005/webhooks/rest/webhook
      RASA_WS_URL: ws://rasa:5005/ws

      # ✅ Rate limit
      RATE_LIMIT_ENABLED: "true"
      RATE_LIMIT_PROVIDER: builtin
      RATE_LIMIT_BACKEND: redis
      REDIS_URL: redis://redis:6379/0

      #✅ CORS / EMBED / CSP (formato compatible con docker-compose)
      FRAME_ANCESTORS: '["http://localhost","http://localhost:8080","http://localhost:5173"]'
      ALLOWED_ORIGINS: '["http://localhost:5173","http://localhost:8080","http://localhost"]'
      FRONTEND_SITE_URL: http://localhost:5173

    depends_on:
      rasa:
       condition: service_healthy
      mongo:
       condition: service_started
      redis:
       condition: service_started
    ports:
      - "8000:8000"
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "sh", "-lc", "curl -fsS http://127.0.0.1:8000/health || curl -fsS http://127.0.0.1:8000/chat/health || curl -fsS http://127.0.0.1:8000/api/chat/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5
    command: >
      bash -lc "
        exec uvicorn backend.main:app
          --host ${UVICORN_HOST}
          --port ${UVICORN_PORT}
          --workers ${UVICORN_WORKERS}
          --proxy-headers
          --forwarded-allow-ips='*'
      "
  # ------------------------------------------------------------
  # Redis (rate-limit/cache)
  # ------------------------------------------------------------
  redis:
    profiles: ["build","prod"]
    image: redis:7-alpine
    container_name: redis
    command: ["redis-server","--appendonly","yes"]
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-net

  # ============================================================
  # Frontend Builder (solo en PROD) — genera ./dist para Nginx
  # ============================================================
  admin-builder:
    profiles: ["prod"]
    image: node:18-alpine
    container_name: admin-builder
    working_dir: /app
    restart: "no"
    command: >
      sh -lc "
        echo '📦 Instalando dependencias...';
        npm ci;
        echo '🎨 Ejecutando build Tailwind (si aplica)...';
        if [ -f /app/build-tailwind.js ]; then node /app/build-tailwind.js || true; fi;
        echo '⚙️ Compilando aplicación React...';
        npm run build;
        echo '✅ Build completado correctamente en ./dist';
      "
    volumes:
      - ./admin_panel_react:/app
      - /app/node_modules
    networks:
      - app-net

  # ============================================================
  # **Nginx PROD** — ÚNICO en PROD (sirve dist + proxy)
  # ============================================================
  nginx-prod:
    profiles: ["prod"]
    image: nginx:alpine
    container_name: nginx-prod
    restart: unless-stopped
    depends_on:
      - backend        
      - rasa
    ports:
      - "8080:80"      
      - "443:443"    
    volumes:
      - ./admin_panel_react/dist:/usr/share/nginx/html:ro
      - ./ops/nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./ops/nginx/conf.d/prod/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./ops/nginx/mime.types:/etc/nginx/mime.types:ro
      - ./ops/nginx/certs:/etc/nginx/certs:ro
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://127.0.0.1/ping"]
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-net

  # ------------------------------------------------------------
  # Backend "vanilla"
  # ------------------------------------------------------------
  ctv_fastapi:
    profiles: ["vanilla"]
    image: python:3.11-slim
    container_name: ctv_fastapi
    restart: unless-stopped
    working_dir: /app
    env_file:
      - ./.env.local
    environment:
      PYTHONUNBUFFERED: "1"
      MONGO_URI: "mongodb://${MONGO_INITDB_ROOT_USERNAME:-admin}:${MONGO_INITDB_ROOT_PASSWORD:-admin123}@ctv_mongo:27017/${MONGO_DB:-chatbot}?authSource=admin"
      RASA_BASE_URL: "http://ctv_rasa:${RASA_PORT:-5005}"
    volumes:
      - ./backend:/app/backend
    command: >
      bash -lc "
        pip install --no-cache-dir --upgrade pip setuptools wheel &&
        if [ -f backend/requirements.txt ]; then pip install --no-cache-dir -r backend/requirements.txt; fi &&
        python -m uvicorn backend.main:app --host 0.0.0.0 --port ${FASTAPI_PORT:-8000}
      "
    ports:
      - "${FASTAPI_PORT:-8000}:8000"
    depends_on:
      - ctv_mongo
      - ctv_rasa
    networks:
      - app-net
